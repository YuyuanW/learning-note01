{"mappings":"AAAA,oHAAwC;AAExC,MAAM,UAAU,GAAG,CAAC,KAAK,GAAG;IACxB,OAAO;QACH,IAAI,EAAG,KAAK;QACZ,QAAQ,EAAG,IAAI;QACf,MAAM,EAAG,IAAI;KAChB,CAAA;CACJ;AAED,MAAM,WAAW,GAAG,CAAC,IAAI,EAAC,KAAK,GAAG;IAC9B,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC;IACjC,OAAO,CAAC,MAAM,GAAG,IAAI;IACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE;IACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3B,OAAO,OAAO,CAAA;CACjB;AAED,MAAM,UAAU,GAAG,CAAC,KAAI,EAAC,EAAE,GAAG;IAC1B,EAAE,CAAC,KAAI,CAAC;IACR,IAAG,KAAI,CAAC,QAAQ,EACZ,IAAI,IAAI,CAAC,GAAC,CAAC,EAAG,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAG,CAAC,EAAE,CACxC,UAAU,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,EAAE,CAAC;CAG1C;AAGD,MAAM,IAAI,GAAG,CAAC,KAAI,EAAC,IAAI,GAAG;IACtB,IAAG,KAAI,IAAI,IAAI,EACX,OAAO,KAAI,CAAA;SACT,IAAG,KAAI,CAAC,QAAQ,EAAC;QACnB,IAAI,IAAI,CAAC,GAAC,CAAC,EAAG,CAAC,GAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAG,CAAC,EAAE,CAAC;YACvC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC;YAC1C,IAAG,MAAM,EACL,OAAO,MAAM,CAAA;SAEpB;QACD,OAAO,SAAS,CAAA;KACnB;IACD,OAAO,SAAS,CAAA;CACnB;AAED,MAAM,UAAU,GAAG,CAAC,KAAI,EAAC,IAAI,GAAG;IAC5B,MAAM,QAAQ,GAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ;IACvD,IAAI,KAAK,GAAG,EAAE;IACd,IAAI,IAAI,CAAC,GAAC,CAAC,EAAG,CAAC,GAAE,QAAQ,CAAC,MAAM,EAAG,CAAC,EAAE,CAClC,IAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,EAAC;QACnB,KAAK,GAAG,CAAC;QACT,MAAK;KACR;IAEL,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;IACxB,OAAO,KAAI,CAAA;CAGd;AAED,IAAI,IAAI,GAAG,UAAU,CAAC,EAAE,CAAC;AACzB,IAAI,KAAK,GAAG,WAAW,CAAC,IAAI,EAAC,EAAE,CAAC;AAChC,IAAI,KAAK,GAAG,WAAW,CAAC,IAAI,EAAC,EAAE,CAAC;AAChC,IAAI,MAAM,GAAG,WAAW,CAAC,KAAK,EAAC,GAAG,CAAC;AACnC,IAAI,MAAM,GAAG,WAAW,CAAC,KAAK,EAAC,GAAG,CAAC;AACnC,IAAI,MAAM,GAAG,WAAW,CAAC,KAAK,EAAC,GAAG,CAAC;AACnC,oDAAoD;AACpD,oBAAoB;AACpB,iCAAiC;AACjC,UAAU,CAAC,IAAI,EAAC,CAAC,IAAI,GAAG;IAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;CAAC,CAAC;AACjD,OAAO,CAAC,GAAG,CAAC,CAAC,8BAA8B,CAAC,CAAC;AAC7C,IAAI,EAAE,GAAG,UAAU,CAAC,IAAI,EAAC,MAAM,CAAC;AAChC,UAAU,CAAC,EAAE,EAAC,CAAC,IAAI,GAAG;IAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;CAAC,CAAC","sources":["tree/src/main.js"],"sourcesContent":["//程序员崇尚简洁，如果你觉得某个编程概念很难，那一定是你理解错了，重新理解一下\r\n\r\nconst createTree = (value)=>{\r\n    return {\r\n        data : value , \r\n        children : null,\r\n        parent : null\r\n    }\r\n}\r\n\r\nconst appendChild = (node,value)=>{\r\n    const newNode = createTree(value)\r\n    newNode.parent = node\r\n    node.children = node.children || []\r\n    node.children.push(newNode)\r\n    return newNode\r\n}\r\n\r\nconst travelTree = (tree,fn)=>{\r\n    fn(tree)\r\n    if(tree.children){\r\n        for(let i=0 ; i < tree.children.length ; i++){\r\n            travelTree(tree.children[i],fn)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst find = (tree,node)=>{\r\n    if(tree == node){\r\n        return tree\r\n    }else if(tree.children){\r\n        for(let i=0 ; i<tree.children.length ; i++){\r\n            const result = find(tree.children[i],node)\r\n            if(result){\r\n                return result\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n    return undefined\r\n}\r\n\r\nconst removeNode = (tree,node)=>{\r\n    const siblings =  node.parent.children || tree.children\r\n    let index = -1\r\n    for(let i=0 ; i< siblings.length ; i++){\r\n        if(siblings[i] == node){\r\n            index = i \r\n            break\r\n        }\r\n    }\r\n    siblings.splice(index,1)\r\n    return tree\r\n\r\n\r\n}\r\n\r\nlet tree = createTree(10)\r\nlet node2 = appendChild(tree,20)\r\nlet node3 = appendChild(tree,30)\r\nlet node21 = appendChild(node2,201)\r\nlet node22 = appendChild(node2,202)\r\nlet node31 = appendChild(node3,301)\r\n// travelTree(tree,(node)=>{console.log(node.data)})\r\n// console.log(tree)\r\n// console.log(find(tree,node21))\r\ntravelTree(tree,(node)=>{console.log(node.data)})\r\nconsole.log(`=============================s`)\r\nlet re = removeNode(tree,node22)\r\ntravelTree(re,(node)=>{console.log(node.data)})\r\n\r\n"],"names":[],"version":3,"file":"tree.f4e3dbc9.js.map","sourceRoot":"/__parcel_source_root/"}